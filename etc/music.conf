# copyright 2003-2005 Gene Pavlovsky <gene.pavlovsky@gmail.com>
#
# this is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# @project@ @version@
#
# -*- sh -*-
#
# music.conf: global music archive configuration options

# music_root - directory containing all music.
# Should contain the trailing slash.
music_root=/usr/media/music/

# music_incoming - directory containing music pending for classification.
# Should contain the trailing slash.
music_incoming="${music_root}incoming/"

# year_lower_bound - a number may be interpreted as a year if it belongs
# to the inclusive range [$year_lower_bound; current year].
# It's used when determining album year from filename.
year_lower_bound=1920

# genres - colon-separated list of all known genres (sed/POSIX REs).
# It's used for validating genre determined from filename.
# See also @datadir@/genre_transform.
genres="a.*capella:acid:acid.*jazz:acid.*punk:acoustic:alt.*rock:alternative:ambient:anime:avantgarde:ballad:bass:beat:bebop:big.*band:black.*metal:bluegrass:blues:booty.*bass:britpop:cabaret:celtic:chamber.*music:chanson:chorus:christian.*gangsta.*rap:christian.*rap:christian.*rock:classic.*rock:classical:club:club.*house:comedy:contemporary.*christian:country:crossover:cult:dance:dance.*hall:darkwave:death.*metal:deep.*house:disco:downtempo:dream:drum.*bass:drum.*solo:duet:easy.*listening:electronic:ethnic:euro.*house:euro.*techno:eurodance:folk:folk.*rock:folklore:freestyle:funk:fusion:game:gangsta:goa:goa.*trance:gospel:gothic:gothic.*rock:grunge:hard.*rock:hardcore:heavy.*metal:hip.*hop:house:humour:indie:industrial:instrum.*pop:instrum.*rock:instrumental:jazz:jazz.*funk:jazz.*fusion:jpop:jrock:jungle:latin:lo.*fi:lounge:meditative:merengue:metal:musical:national.*folk:native.*american:negerpunk:new.*age:new.*wave:noise:oldies:opera:other:polka:polsk.*punk:pop:pop.*folk:pop.*funk:porn.*groove:power.*ballad:pranks:primus:progressive:prog.*rock:prog.*trance:psy:psychedelic:psychadelic:psy.*rock:psy.*trance:punk:punk.*rock:r&b:rap:rave:reggae:retro:revival:rhythmic.*soul:rock:rock.*roll:salsa:samba:satire:showtunes:ska:slow.*jam:slow.*rock:sonata:soul:sound.*clip:soundtrack:southern.*rock:space:speech:swing:symphonic.*rock:symphony:synthpop:tango:techno:techno.*ind.*:terror:thrash.*metal:top.*[0-9]*:trailer:trance:tribal:trip.*hop:vocal"

# track_split_playlength - tracks with playlength >= this value (in seconds)
# are marked for track splitting (if CDDB fails). I set it to 2100 (35 min).
track_split_playlength=2100

# track_path_pattern - this function echoes the track destination path.
#
# availability of the following environment variables can be relied upon:
#
# $title  - track's title
# $artist - track's artist if $various is 'yes', album's artist otherwise
# $album  - album name
# $date   - album date
# $genre  - album genre
# $tracknumber - track's number
# $cd_number   - album CD number string (empty if none)
# $various     - various artists or not (yes/no)
# $misc        - track is from miscellaneous directory (yes/no)
#
# I've crafted this function as I like my music collection to be, but if
# you don't like it this way, tweak it to suit your tastes.
# This is done as a function (not just configuration variable) to allow
# for more complex behaviour than the configuration variable gives.
# Here, this is used to use different patterns for single-artist and
# various artists albums, and also for soundtrack albums.
track_path_pattern()
{
  test "$cd_number" && cd_number="$cd_number/"

  test "$artist" = "$album" -o -z "$artist" -o "$artist" = unknown_artist &&
    declare artistp="" ||
    declare artistp="$artist-"

  # miscellaneous pattern
  declare misc_pattern='$music_root$genre/misc/$artistp$title.ogg'

  # single artist album pattern
  # date goes first to allow for chronological sorting of albums by their dirnames.
  declare sa_pattern='$music_root$genre/$artist/$date-$album/$cd_number$tracknumber-$title.ogg'

  # various artists album pattern
  # date goes second to allow for categorical sorting of albums by their dirnames.
  # (e.g., there're VA albums released in series over time, examples being
  # "cafe del mar", "buddha bar", "progression sessions" etc., such pattern
  # allows to sort all the VA albums in a given series by their dirname; would
  # the date be posited first, it would effectively hinder this possibility)
  declare va_pattern='$music_root$genre/va-$album-$date/$cd_number$tracknumber-$artistp$title.ogg'

  # soundtrack album pattern
  declare soundtrack_pattern='$music_root$genre/$album/$cd_number$tracknumber-$artistp$title.ogg'

  if test "$misc" = no; then
    if test "$genre" = soundtrack -o "$genre" = game -o "$genre" = anime; then
      eval echo "$soundtrack_pattern"
    else
      test "$various" = yes &&
        eval echo "$va_pattern" ||
        eval echo "$sa_pattern"
    fi
  else
    test "$genre" = unknown_genre && genre=
    eval echo "$misc_pattern"
  fi
}

# list of pathname patterns
#
# patterns may contain the following variables:
#
# $title  - track's title
# $artist - track/album's artist
# $album  - album name
# $tracknumber - track's number
#
# pattern_{artist,album,title,tracknumber} are substituted for these variables
# in pathname patterns.
#
# Note that pathname's extension is stripped before pattern matching.
# Also before pattern matching, date and genre are guessed automatically
# and then stripped from the pathname (along with any junk near them - like
# whitespace or brackets etc.). So these patterns define matching against
# the pathname not containing genre and date. In case if you're interested,
# genre is taken from the sequence of characters before the first '/', as
# long as this sequence matches any of the patterns in 'genres' variable;
# date is taken as the earliest occurring sequence of four digits, as long
# as it lies between 'year_lower_bound' variable and the current year.
#
# These patterns are sed/POSIX REs, so escape characters where needed.
# The $ character, matching the null string at the end of the line, should
# not be used (if you use it, nothing will match successfully - at all!).
# This is not a problem because there is no point in using it (or ^).
# Don't overuse parenthesized subexpressions, because sed REs only allow 9
# back references to them in the replacement part of the 's///' command, and
# for matching to work, one subexpression is used internally (so, you should
# not have more than 8 subexpressions in your patterns - and note that if you
# also use subexpressions in pattern_{artist,album,title,tracknumber}, these
# add to the count of ones in pathname_patterns).
pattern_artist='[^-_ ][^/]*[^-_ ]'
pattern_album='[^-_ ].*[^-_ ]'
pattern_title='[^-_ ][^/]*[^-_ ]'
pattern_tracknumber='[0-9]\{2,\}'
array_add pathname_patterns \
  '\(v\.\?a\.\?\|various\|various[-_ ]artists\)[-_ ]\{1,\}$album\/[[(]*$tracknumber[])]*[-_ ]\{1,\}$artist-\{1,\}$title'
array_add pathname_patterns \
  '$artist[/-]$album\/[[(]*$tracknumber[])]*[-_ ]\{1,\}$title'
array_add pathname_patterns \
  '$artist[/-]$album\/$title[-_ ]\{1,\}[[(]*$tracknumber[])]*'
array_add pathname_patterns \
  '$artist[/-]$album\/$title'
array_add pathname_patterns \
  '.*\/\?misc\/$artist-$title'
array_add pathname_patterns \
  '$artist[/-][[(]*$tracknumber[])]*[-_ ]\{1,\}$title'
array_add pathname_patterns \
  '$artist[/-]$title[-_ ]\{1,\}[[(]*$tracknumber[])]*'
array_add pathname_patterns \
  '[[(]*$tracknumber[])]*[-_ ]\{1,\}$artist-\{1,\}$title'
array_add pathname_patterns \
  '[[(]*$tracknumber[])]*[-_ ]\{1,\}$title'
array_add pathname_patterns \
  '$artist[/-]$title'
