# copyright 2003-2005 Gene Pavlovsky <gene.pavlovsky@gmail.com>
#
# this is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# @project@ @version@
#
# -*- sh -*-
#
# hardlink.conf: ova-hardlink configuration options

# Hardlinking allows to maintain various paths to the same tracks:
# by-date, by-artist, by-mtime, and anything you can come up with.
# The idea is taken from linux-2.6 /dev/disk/by-* and rsync backup.

# music_by_* - directories containing by-* hardlinks.
# Should contain the trailing slash.
music_by_root="${music_root:0:$((${#music_root}-1))}-by/"

music_by_album="${music_by_root}album/"
music_by_artist="${music_by_root}artist/"
music_by_date="${music_by_root}date/"
music_by_date_genre="${music_by_root}date_genre/"
music_by_genre_date="${music_by_root}genre_date/"
music_by_genre_compilation="${music_by_root}genre_compilation/"
music_by_mtime_ymd="${music_by_root}mtime_ymd/"
music_by_mtime_ym="${music_by_root}mtime_ym/"
music_by_mtime_y="${music_by_root}mtime_y/"
music_by_mtime_y_m_d="${music_by_root}mtime_y_m_d/"
music_by_mtime_y_m="${music_by_root}mtime_y_m/"

# list_all_include - a '\|'-separated list of additional relative directories that are included
# when listing music_root. These are added to the default list that contains all of the $genres
# defined in music.conf (see list_all init code below). Probably, you've got nothing to add here.
list_all_include=''
# list_all_exclude - a '\|'-separated list of relative directories that are explicitly excluded
# when listing music_root. If your incoming directory is inside the music root, you need at least
# 'incoming' here.
list_all_exclude='demo\|incoming\|lyrics\|radio'

# --------------------------------------
# list_all init code - don't change
# --------------------------------------
# convert $genres from music.conf to a '\|'-separated list of relative directories that are matched
list_all_genres=$(echo "$genres" | sed 's/:/\\|/g')
test "$list_all_include" && list_all_genres="$list_all_include\|$list_all_genres"
# if there's anything to exclude, add the necessary find options, otherwise, add no options
test "$list_all_exclude" &&
  list_all_exclude_arg='-and -not -regex '"^${music_root}\($list_all_exclude\)/\?.*" ||
  list_all_exclude_arg=
# --------------------------------------

# echoes all albums that should be hardlinked
list_all()
{
  genre_artist_album_regex="\($list_all_genres\)"'/[^/]*/[^/]*'
  genre_va_album_regex="\($list_all_genres\)"'/va-[^/]*'
  misc_regex="\(misc\|\($list_all_genres\)/misc\)"
  find "$music_root" -type d -regex "^${music_root}$genre_artist_album_regex\$" -and \
    -not -regex "^${music_root}\($genre_va_album_regex\|$misc_regex\)/\?.*\$"  $list_all_exclude_arg
  find "$music_root" -type d -regex "^${music_root}$genre_va_album_regex\$" $list_all_exclude_arg
  find "$music_root" -type d -regex "^${music_root}$misc_regex\$" $list_all_exclude_arg
}

# hardlink_* - these functions create all the hard links.
# See below on how to enable/disable them.
#
# availability of the following environment variables can be relied upon:
#
# $absolute_path - absolute directory path
# $relative_path - directory path relative to the music root
#
# $file   - file name
# $title  - track's title
# $artist - track's artist if $various is 'yes', album's artist otherwise
# $album  - album name
# $date   - album date
# $genre  - album genre
# $comment     - track's comment
# $tracknumber - track's number
# $various     - various artists or not (yes/no)
# $misc        - track is from miscellaneous directory (yes/no)
# $ost         - soundtrack/game/anime or anything else (yes/no)
#
# available helper functions:
#   hard_lndir FROMDIR TODIR - create a directory tree TODIR with files
#     hard linked to files in the directory tree FROMDIR. Please note
#     that this functions takes *absolute* pathnames only.

hlnk()
{
  declare dest_path
  dest_path=$(echo "$1" | sed -e 'y/ /_/' -e 's/_\{2,\}/_/g' \
    -e 's/\(^\|_\)\([][/\<>!@#$%^&*()+={};:,.?~-]*\)\($\|_\)/\2/g' \
    -e 's/\/\./\/dot-/g')
  if test "$dry_run" = yes; then
    echo "hard_lndir '$absolute_path' '$dest_path'"
  else
    hard_lndir "$absolute_path" "$dest_path"
  fi
}

# genre/artist/album

hardlink_by_album()
  { test "$ost" = no && hlnk "${music_by_album}$album/$artist/$date-$album"; }
hardlink_by_artist()
  { test "$ost" = no && hlnk "${music_by_artist}$artist/$date-$album"; }
hardlink_by_date() {
  test "$ost" = yes &&
    hlnk "${music_by_date}$date/$album" ||
    hlnk "${music_by_date}$date/$artist/$date-$album"
}
hardlink_by_date_genre() {
  test "$ost" = yes &&
    hlnk "${music_by_date_genre}$date/$genre/$album" ||
    hlnk "${music_by_date_genre}$date/$genre/$artist/$date-$album"
}
hardlink_by_genre_date() {
  test "$ost" = yes &&
    hlnk "${music_by_genre_date}$genre/$date/$album" ||
    hlnk "${music_by_genre_date}$genre/$date/$artist/$date-$album"
}

# genre/va-album

hardlink_va_by_album()
  { hlnk "${music_by_album}va-$album/$date"; }
hardlink_va_by_date()
  { hlnk "${music_by_date}$date/va-$album-$date"; }
hardlink_va_by_date_genre()
  { hlnk "${music_by_date_genre}$date/$genre/va-$album-$date"; }
hardlink_va_by_genre_date()
  { hlnk "${music_by_genre_date}$genre/$date/va-$album-$date"; }
hardlink_va_by_genre_compilation()
{
  declare compilation volume test_path lookalikes digits
  compilation=$(echo "$album" | sed 's/ *,\? *\( \(#\|level\|part\|vol\.\?\|volume\)\|\)  *\([0-9]\{1,3\}\|[ivx]\{1,5\}\)\( *-.*\)\? *$//')
  if test "$compilation" = "$album"; then
    test_path=$(echo "$absolute_path" | sed 's/-[0-9]\{4\}$//')
    # return if there are no albums looking like this one with a number appended
    lookalikes=$(ls -1d "${test_path}_"[0-9]*-[0-9]* 2>/dev/null | head -n 1)
    test -z "$lookalikes" && return
    digits=$(echo "$lookalikes" | sed 's/.*_\([0-9]\{1,\}\)-[0-9]\{4\}/\1/')
    digits=${#digits}
    volume=$(zeropad 1 $digits)
    # return if there is an album looking like this one with zero-padded volume '1' appended
    ls -1d "${test_path}_$volume"-[0-9]* &>/dev/null && return
  else
    volume=${album:$((${#compilation}+1))}
  fi
  hlnk "${music_by_genre_compilation}$genre/$compilation/$volume-$date"
}

# all-purpose

# hardlink_all_by_mtime_generic - generic mtime hardlink function
# args: $1 - date format; $2 - directory
hardlink_all_by_mtime_generic()
{
  declare file mtime_new mdate
  # maybe mtime is already set by a previous call?
  # notice: ova-hardlink does mtime=; mtime_date= for each directory
  if test -z "$mtime"; then
    for file in $(find "$absolute_path" -type f -name '*.ogg'); do
      mtime_new=$(stat -c %Y "$file")
      if test -z "$mtime" || test $mtime_new -gt $mtime ; then
        mtime=$mtime_new
        mtime_date=$(stat -c %y "$file")
      fi
    done
  fi
  mdate=$(date -d "$mtime_date" +"$1" | dd conv=lcase 2>/dev/null)
  if test "$misc" = yes; then
    test "$genre" &&
      hlnk "$2$mdate/$genre/misc" ||
      hlnk "$2$mdate/misc"
  elif test "$various" = yes; then
    hlnk "$2$mdate/$genre/va-$album-$date"
  elif test "$ost" = yes; then
    hlnk "$2$mdate/$genre/$album"
  else
    hlnk "$2$mdate/$genre/$artist/$date-$album"
  fi
}

hardlink_all_by_mtime_ymd()
  { hardlink_all_by_mtime_generic '%Y%m%d' "$music_by_mtime_ymd"; }
hardlink_all_by_mtime_ym()
  { hardlink_all_by_mtime_generic '%Y%m' "$music_by_mtime_ym"; }
hardlink_all_by_mtime_y()
  { hardlink_all_by_mtime_generic '%Y' "$music_by_mtime_y"; }
hardlink_all_by_mtime_y_m_d()
  { hardlink_all_by_mtime_generic '%Y/%m_%B/%d_%A' "$music_by_mtime_y_m_d"; }
hardlink_all_by_mtime_y_m()
  { hardlink_all_by_mtime_generic '%Y/%m_%B' "$music_by_mtime_y_m"; }

# to enable/disable specific hardlink functions, add or remove (comment out)
# their "array_add group function" commands.

# hardlinks_genre_artist_album (genre/artist/album)
array_add hardlinks_genre_artist_album hardlink_by_album
array_add hardlinks_genre_artist_album hardlink_by_artist
array_add hardlinks_genre_artist_album hardlink_by_date
array_add hardlinks_genre_artist_album hardlink_by_date_genre
array_add hardlinks_genre_artist_album hardlink_by_genre_date
array_add hardlinks_genre_artist_album hardlink_all_by_mtime_ymd
array_add hardlinks_genre_artist_album hardlink_all_by_mtime_ym
array_add hardlinks_genre_artist_album hardlink_all_by_mtime_y
array_add hardlinks_genre_artist_album hardlink_all_by_mtime_y_m_d
array_add hardlinks_genre_artist_album hardlink_all_by_mtime_y_m

# hardlinks_genre_va_album (genre/va-album)
array_add hardlinks_genre_va_album hardlink_va_by_album
array_add hardlinks_genre_va_album hardlink_va_by_date
array_add hardlinks_genre_va_album hardlink_va_by_date_genre
array_add hardlinks_genre_va_album hardlink_va_by_genre_date
array_add hardlinks_genre_va_album hardlink_va_by_genre_compilation
array_add hardlinks_genre_va_album hardlink_all_by_mtime_ymd
array_add hardlinks_genre_va_album hardlink_all_by_mtime_ym
array_add hardlinks_genre_va_album hardlink_all_by_mtime_y
array_add hardlinks_genre_va_album hardlink_all_by_mtime_y_m_d
array_add hardlinks_genre_va_album hardlink_all_by_mtime_y_m

# hardlinks_misc (misc and genre/misc)
array_add hardlinks_misc hardlink_all_by_mtime_ymd
array_add hardlinks_misc hardlink_all_by_mtime_ym
array_add hardlinks_misc hardlink_all_by_mtime_y
array_add hardlinks_misc hardlink_all_by_mtime_y_m_d
array_add hardlinks_misc hardlink_all_by_mtime_y_m

# validate path and call all functions from the appropriate hardlink functions group.
# available helper functions:
#   find_ogg_in_dir DIR - searches for .ogg files in DIR, echoes the first found
#   find_ogg_in_dir_or_cd_subdir DIR - also searches in the first DIR/cd_* subdirectory
#   read_ogg_tag FILE - fills environment variables from FILE's Ogg Vorbis comments
# args: $1 - absolute path; $2 - path relative to the music root
hardlinks()
{
  declare i file array array_count absolute_path relative_path misc=no various=no ost=no
  # genre/artist/album
  if echo $2 | grep -e '^[^/]*/[^/]*/[^/]*$' &>/dev/null; then
    file=$(find_ogg_in_dir_or_cd_subdir $1)
    test $? -ne 0 && return 1
    array="genre_artist_album"
  # genre/va-album
  elif echo $2 | grep -e '^[^/]*/va-[^/]*$' &>/dev/null; then
    file=$(find_ogg_in_dir_or_cd_subdir $1)
    test $? -ne 0 && return 1
    various=yes
    array="genre_va_album"
  # misc and genre/misc
  elif echo $2 | grep -e '^misc$' -e '^[^/]*/misc$' &>/dev/null; then
    file=$(find_ogg_in_dir $1)
    test $? -ne 0 && return 1
    misc=yes
    array="misc"
  # unhandled case, return with error
  else
    {
      echo "Incorrect directory: '$1'"
      echo
      echo "Valid directories:"
      echo "  ${music_root}genre/artist/album"
      echo "  ${music_root}genre/va-album"
      echo "  ${music_root}genre/misc"
      echo "  ${music_root}misc"
    } >&4
    exit 1
  fi
  read_ogg_tag $file
  title=$(echo "$title" | sed 'y/\//_/')
  artist=$(echo "$artist" | sed 'y/\//_/')
  album=$(echo "$album" | sed -e 'y/\//_/' -e 's/ *(cd [0-9].*)$//')
  date=$(echo "$date" | sed 'y/\//_/')
  genre=$(echo "$genre" | sed 'y/\//_/')
  tracknumber=$(echo "$tracknumber" | sed 'y/\//_/')
  comment=$(echo "$genre" | sed 'y/\//_/')
  if test "$genre" = soundtrack -o "$genre" = game -o "$genre" = anime; then
    artist=
    ost=yes
  fi
  array="hardlinks_$array"
  array_count="${array}_count"
  absolute_path="$1"
  relative_path="$2"
  if test "${!array_count}"; then
    for ((i=0; i<${!array_count}; ++i)); do
      eval '${'$array[$i]'}'
    done
  fi
}
